CLASS: VegetableClass
Assertion:
Class Fields:  weight


Default Constructor 
IMPORT: NONE 
EXPORT: constructors never export
 Assertion: default values for veg are set if the object does not have any specs 
 ALGORITHM:  
     
           weight = 1.0  
       
ALternate Constructor
IMPORT: theName (String), theWeight (Real), theStorageTemp (Real), theDate (GregorianCalendar Object), thePackaging (String)
EXPORT: constructors never export
  Assertion: Before it creates the object it makes sure that they are valid inputs 
  ALGORITHM: 
             super <-- theName, theStorageTemp, thePackaging, theDate
             IF ( ValidateW <--theWeight) THEN   
                weight = theWeight
               
             ELSE 
                FAIL 
             END IF 

Copy Constructor 
IMPORT: theVegetable (VegetableClass) 
EXPORT: none 
  Assertion: 
  ALGORITHM:
            super <-- theVeg
            weight = theWeight.getWeight <-- none  
Accessors 

SUBMODULE: getWeight 
IMPORT: none
EXPORT: weight (Real)
  Assertion: will output copy of the weight 
  ALGORITHM: 
            export copy of weight 
END SUBMODULE 

SUBMODULE: toString 
IMPORT: none 
EXPORT: vegetableString
 Assertion: 
 ALGORITHM: 
           vegetableString = super.toString <-- none + " This Vegetable has a weight of "  +weight
             
END SUBMODULE 

SUBMODULE: writeOut 
IMPORT: none 
EXPORT: writeString (String)
 Assertion: 
 ALGORITHM: 
           writeString = super.toString <-- none + +type+  ", " +volume
END SUBMODULE 

SUBMODULE: equals 
IMPORT: theObject 
EXPORT: isequalto (boolean) 
 Assertion: checks to ensure that theObject is part of the Meat Class 
 ALGORITHM: 
           isequalto = false 
            IF theObject is really a VegetableClass THEN 
               make theObject to an VegetableClass named theVeg
                 IF super.equals <-- theVeg THEN
                    IF the weight same as theVegetable.getWeight <-- none THEN 
                             isequalto = true
END SUBMODULE    

SUBMODULE: clone  
IMPORT: none
EXPORT: VegetableClass (VegetableClass Object)
Assertion: clones the object 
ALGORITHM: 
          exports copy of VegetableClass
END SUBMODULE

Mutators

MUTATOR: setWeight 
IMPORT: theWeight (Real)
EXPORT: none
   Assertion: will change the data in the mutator  
   ALGORTIHM: 
             IF ValidateW <-- theweight THEN 
             weight = theWeight
END MUTATOR  
            
SUBMODULE: ValidateW
IMPORT: theWeight (Real) 
EXPORT: ValidateW
 Assertion: 
 ALGORITHM: 
           ValidateW = false 
           IF theWeight between 0.2 and 5.0 inclusive THEN 
               ValidateW = true 
                 END IF 
END SUBMODULE 

SUBMODULE: calcSpace                                     
IMPORT: food (FoodClass Object)                          
EXPORT: space (Integer)                                 
Assertion: calculates the space in weight   
ALGORITHM: 
          space =  (Convert to Integer) (weight * 0.86)
END SUBMODULE
 